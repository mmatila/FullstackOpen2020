{"version":3,"sources":["components/PersonForm.js","components/Contact.js","components/Persons.js","components/Filter.js","components/Notification.js","components/ErrorNotification.js","services/personService.js","App.js","serviceWorker.js","index.js"],"names":["PersonForm","personAdd","nameHandler","name","numberHandler","number","onSubmit","onChange","value","type","Contact","person","removePerson","onClick","Persons","persons","ignore","filter","map","key","id","Filter","handler","Notification","message","className","ErrorNotification","url","axios","get","then","response","data","newPerson","post","put","delete","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","newFilter","setNewFilter","successMessage","setSuccessMessage","errorMessage","setErrorMessage","useEffect","personService","event","target","preventDefault","Person","includes","personExists","window","confirm","changingPerson","find","p","changedPerson","returnedPerson","setTimeout","catch","error","concat","toUpperCase","deletedPerson","console","log","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ffee915.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst PersonForm = ({ personAdd, nameHandler, name, numberHandler, number }) => {\r\n    return (\r\n      <form onSubmit={personAdd}>\r\n        <div>\r\n          name: <input onChange={nameHandler} value={name} />\r\n        </div>\r\n        <div>\r\n          number: <input onChange={numberHandler} value={number} />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n    )\r\n  }\r\n\r\n  export default PersonForm","import React from 'react'\r\n\r\n\r\nconst Contact = ({ person, removePerson }) => {\r\n\r\n    return (\r\n      <p>{person.name} {person.number} <button onClick={() => {removePerson(person)}} >delete</button></p>\r\n    )\r\n  }\r\n\r\n  export default Contact","import React from 'react'\r\nimport Contact from './Contact'\r\n\r\n\r\n\r\nconst Persons = ({ persons, ignore, removePerson }) => {\r\n\r\n    return (\r\n        persons\r\n        .filter(ignore)\r\n          .map(person => <Contact key={person.id} person={person} removePerson={removePerson} />)\r\n    )\r\n  }\r\n\r\n  export default Persons","import React from 'react'\r\n\r\nconst Filter = ({ filter, handler }) => {\r\n    return (\r\n      <div>\r\n        filter results: <input value={filter} onChange={handler} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Filter","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"success\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notification","import React from 'react'\r\n\r\nconst ErrorNotification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default ErrorNotification","import axios from 'axios'\r\n\r\nconst url = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(url)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const create = newPerson => {\r\n    const request = axios.post(url, newPerson)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const update = (id, newPerson) => {\r\n    const request = axios.put(`${url}/${id}`, newPerson)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\n  const remove = (id) => {\r\n    const request = axios.delete(`${url}/${id}`)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  export default { getAll, create, update, remove }\r\n","import React, { useState, useEffect } from 'react'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Filter from './components/Filter'\nimport Notification from './components/Notification'\nimport ErrorNotification from './components/ErrorNotification'\nimport personService from './services/personService'\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n  const [successMessage, setSuccessMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(persons => { setPersons(persons) })\n  }, [])\n\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    const Person = {\n      name: newName,\n      number: newNumber\n    }\n\n    const personExists = (persons, name) => {\n      return (persons.map(person => person.name).includes(name))\n    }\n\n    if (personExists(persons, newName)) {\n      if (window.confirm(`${newName} is already added. Click 'OK' to update number`)) {\n        const changingPerson = persons.find(p => p.name === newName)\n        const changedPerson = {...changingPerson, number: newNumber}\n\n        personService\n          .update(changingPerson.id, changedPerson)\n          .then(returnedPerson => {\n            setPersons(persons.map(person => person.id !== changingPerson.id ? person : returnedPerson))\n            setSuccessMessage(\n              `Number updated successfully!`\n            )\n            setTimeout(() => {\n              setSuccessMessage(null)\n            }, 3000)\n          })\n          .catch(error => {\n            setErrorMessage(\n              `An error occurred updating number. Try refreshing the page`\n            )\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 2500)\n          })\n      }\n      \n    } else {\n      personService\n        .create(Person)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setSuccessMessage(\n            `Person ${Person.name} was added to the phonebook!`\n          )\n          setTimeout(() => {\n            setSuccessMessage(null)\n          }, 3000)\n        })\n        .catch(error => {\n          setErrorMessage(error.response.data.error)\n        })\n    }\n\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const handleNameChange = (event) => { setNewName(event.target.value) }\n\n  const handleNumberChange = (event) => { setNewNumber(event.target.value) }\n\n  const handleFilterChange = (event) => { setNewFilter(event.target.value) }\n\n  const ignoreCase = (person) => (\n    person.name.toUpperCase()\n      .includes(newFilter.toUpperCase())\n  )\n\n  const removePerson = (deletedPerson) => {\n    if (window.confirm(`Are you sure you want to delete ${deletedPerson.name}?`)) {\n      personService\n        .remove(deletedPerson.id)\n        .then(() => {\n          setPersons(persons.filter(person => person.id !== deletedPerson.id))\n          setSuccessMessage(\n            `Person removed successfully!`\n          )\n          setTimeout(() => {\n            setSuccessMessage(null)\n          }, 2500)\n        })\n        .catch(error => {\n          console.log('Failed')\n        })\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={successMessage}/>\n      <Filter filter={newFilter} handler={handleFilterChange} />\n      <h3>add a new</h3>\n      <PersonForm\n        nameHandler={handleNameChange}\n        name={newName}\n        numberHandler={handleNumberChange}\n        number={newNumber}\n        personAdd={addPerson}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={persons} ignore={ignoreCase} removePerson={removePerson} />\n      <ErrorNotification message={errorMessage}/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}